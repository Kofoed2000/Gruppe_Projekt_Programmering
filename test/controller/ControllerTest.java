package controller;

import ordination.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.LocalTime;

import static org.junit.jupiter.api.Assertions.*;


class ControllerTest {

    private Controller controller;
    private LocalDate startDen;
    private LocalDate slutDen;
    private Patient patient;
    private Laegemiddel l√¶gemiddel;

    @BeforeEach
    void setup() {

        controller = Controller.getTestController();
        startDen = LocalDate.of(2025, 9, 10);
        slutDen = LocalDate.of(2025, 9, 20);
        patient = new Patient("121256-0512", "Jane Jensen", 63.4);
        l√¶gemiddel = new Laegemiddel("Paracetamol", 1, 1.5, 2, "ML");

    }


    @Test
    void testOpretPNOrdinationIllegalArgumentException() {

        startDen = LocalDate.of(2025, 9, 20);
        slutDen = LocalDate.of(2025, 9, 10);


        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
                controller.opretPNOrdination(startDen, slutDen, patient, l√¶gemiddel, 3));
        assertEquals("Start dato skal v√¶re f√∏r slut datoüë∫", exception.getMessage());

    }

    @Test
    void testOpretPNOrdinationFindOrdinationPaaPatient() {

        PN pn = controller.opretPNOrdination(startDen, slutDen, patient, l√¶gemiddel, 5);
        assertEquals(1, patient.getOrdinationer().size());
        assertEquals(pn, patient.getOrdinationer().get(0));

    }

    @Test
    void testOpretDagligFastOrdinationIllegalArgumentException() {

        startDen = LocalDate.of(2025, 9, 20);
        slutDen = LocalDate.of(2025, 9, 10);

        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
                controller.opretDagligFastOrdination(startDen, slutDen, patient, l√¶gemiddel, 1, 2, 3, 4));
        assertEquals("Start dato skal v√¶re f√∏r slut datoüë∫", exception.getMessage());

    }


    @Test
    void testOpretDagligFastOrdinationFindOrdinationPaaPatient() {

        DagligFast df = controller.opretDagligFastOrdination(startDen, slutDen, patient, l√¶gemiddel, 1, 2, 3, 4);
        assertEquals(1, patient.getOrdinationer().size());
        assertEquals(df, patient.getOrdinationer().getFirst());


    }

    @Test
    void testOpretDagligSkaevOrdinationIllegalArgumentExceptionDatoer() {

        startDen = LocalDate.of(2025, 9, 15);
        slutDen = LocalDate.of(2025, 9, 10);
        LocalTime[] klokkeslet = new LocalTime[2];
        double[] enheder = new double[2];


        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
                controller.opretDagligSkaevOrdination(startDen, slutDen, patient, l√¶gemiddel, klokkeslet, enheder));
        assertEquals("Start dato skal v√¶re f√∏r slutdatoüë∫", exception.getMessage());

    }

    @Test
    void testOpretDagligSkaevOrdinationIllegalArugmentExceptionKlokkesletL√¶ngde() {

        LocalTime[] klokkeslet = new LocalTime[6];
        double[] enheder = new double[12];


        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
                controller.opretDagligSkaevOrdination(startDen, slutDen, patient, l√¶gemiddel,
                        klokkeslet, enheder));
        assertEquals("Antallet af klokkesl√¶t og antallet af enheder skal v√¶re ensüë∫", exception.getMessage());

    }

    @Test
    void testOpretDagligSkaevOrdinationFindOrdinationPaaPatient() {

        LocalTime[] klokkeslet = new LocalTime[2];
        double[] enheder = new double[2];

        DagligSkaev ds = controller.opretDagligSkaevOrdination(startDen, slutDen, patient, l√¶gemiddel, klokkeslet, enheder);
        assertEquals(1, patient.getOrdinationer().size());
        assertEquals(ds, patient.getOrdinationer().getFirst());

    }

    @Test
    void testOrdinationPNAnvendtIllegalArgumentExceptionGyldighedsperiode() {

        PN pn = controller.opretPNOrdination(startDen, slutDen, patient, l√¶gemiddel, 5);
        LocalDate dato = LocalDate.of(2025, 9, 25);
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
                controller.ordinationPNAnvendt(pn, dato));
        assertEquals("Datoen er ikke indenfor ordinationens gyldighedsperiodeüë∫", exception.getMessage());
    }

    @Test
    void testOrdinationsPNAnvendtFindPNAnvendtPaaPatient() {

        PN pn = controller.opretPNOrdination(startDen, slutDen, patient, l√¶gemiddel, 5);
        LocalDate dato = LocalDate.of(2025, 9, 15);
        controller.ordinationPNAnvendt(pn, dato);
        assertEquals(1, pn.getAntalGangeGivet());

    }

    @Test
    void anbefaletDosisPrDoegnLetV√¶gt() {

        double v√¶gt = 24.0;
        patient = new Patient("121256-0512", "Jane Jensen", v√¶gt);
        double expectedDosis = v√¶gt * l√¶gemiddel.getEnhedPrKgPrDoegnLet();
        double actualDosis = controller.anbefaletDosisPrDoegn(patient, l√¶gemiddel);
        assertEquals(expectedDosis, actualDosis);

    }

    @Test
    void anbefaletDosisPrDoegnMellemV√¶gt() {

        double v√¶gt1 = 26.0;
        patient = new Patient("121256-0512", "Jane Jensen", v√¶gt1);
        double expectedDosis1 = v√¶gt1 * l√¶gemiddel.getEnhedPrKgPrDoegnNormal();
        double actualDosis1 = controller.anbefaletDosisPrDoegn(patient, l√¶gemiddel);
        assertEquals(expectedDosis1, actualDosis1);

        double v√¶gt2 = 119.0;
        patient = new Patient("121256-0512", "Jane Jensen", v√¶gt2);
        double expectedDosis2 = v√¶gt2 * l√¶gemiddel.getEnhedPrKgPrDoegnNormal();
        double actualDosis2 = controller.anbefaletDosisPrDoegn(patient, l√¶gemiddel);
        assertEquals(expectedDosis2, actualDosis2);

    }

    @Test
    void anbefaletDosisPrDoegnTungV√¶gt() {

        double v√¶gt = 121.0;
        patient = new Patient("121256-0512", "Jane Jensen", v√¶gt);
        double expectedDosis = v√¶gt * l√¶gemiddel.getEnhedPrKgPrDoegnTung();
        double actualDosis = controller.anbefaletDosisPrDoegn(patient, l√¶gemiddel);
        assertEquals(expectedDosis, actualDosis);
    }

    @Test
    void antalOrdinationerPrV√¶gtPrL√¶gemiddel() {

        double v√¶gtStart = 30.0;
        double v√¶gtSlut = 75.0;

        Patient patient = controller.opretPatient("121256-0512", "Jane Jensen", 63.4);
        Patient patient1 = controller.opretPatient("070985-1153", "Finn Madsen", 70.0);
        Patient patient2 = controller.opretPatient("050972-1233", "Hans J√∏rgensen", 60.0);
        Patient patient3 = controller.opretPatient("011064-1522", "Ulla Nielsen", 50.0);

        Laegemiddel l√¶gemiddel1 = new Laegemiddel("Paracetamol", 1, 1.5, 2, "ML");
        Laegemiddel l√¶gemiddel2 = new Laegemiddel("Acetylsalicylsyre", 0.1, 0.15, 0.16, "Styk");
        Laegemiddel l√¶gemiddel3 = new Laegemiddel("Fucidin", 0.025, 0.025, 0.025, "Styk");
        Laegemiddel l√¶gemiddel4 = new Laegemiddel("Methotrexat", 0.01, 0.015, 0.2, "Styk");

        controller.opretPNOrdination(startDen, slutDen, patient, l√¶gemiddel1, 5);
        controller.opretPNOrdination(startDen, slutDen, patient1, l√¶gemiddel2, 1);
        controller.opretPNOrdination(startDen, slutDen, patient2, l√¶gemiddel3, 3);
        controller.opretPNOrdination(startDen, slutDen, patient3, l√¶gemiddel4, 4);


        int actual1 = controller.antalOrdinationerPrV√¶gtPrL√¶gemiddel(v√¶gtStart, v√¶gtSlut, l√¶gemiddel1);
        int actual2 = controller.antalOrdinationerPrV√¶gtPrL√¶gemiddel(v√¶gtStart, v√¶gtSlut, l√¶gemiddel2);
        int actual3 = controller.antalOrdinationerPrV√¶gtPrL√¶gemiddel(v√¶gtStart, v√¶gtSlut, l√¶gemiddel3);
        int actual4= controller.antalOrdinationerPrV√¶gtPrL√¶gemiddel(v√¶gtStart, v√¶gtSlut, l√¶gemiddel4);


        assertEquals(1, actual1);
        assertEquals(1, actual2);
        assertEquals(1, actual3);
        assertEquals(1, actual4);

    }

    @Test
    void antalOrdinationerPrV√¶gtPrL√¶gemiddelForkertV√¶gt() {

        //v√¶gtStart m√• ikke v√¶re h√∏jere end v√¶gtSlut
        double v√¶gtStart = 50.0;
        double v√¶gtSlut = 25.0;

        Patient patient = controller.opretPatient("121256-0512", "Jane Jensen", 40.4);
        Laegemiddel l√¶gemiddel1 = new Laegemiddel("Paracetamol", 1, 1.5, 2, "ML");
        controller.opretPNOrdination(startDen, slutDen, patient, l√¶gemiddel1, 5);
        int actual = controller.antalOrdinationerPrV√¶gtPrL√¶gemiddel(v√¶gtStart, v√¶gtSlut, l√¶gemiddel1);


        assertNotEquals(1, actual);

    }

}